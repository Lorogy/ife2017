function milliFormat(num){
  return num&&num
    .toString()
    .replace(/\d(?=(\d{3})+\.)/g,'$&,');
}

/* 查找以\d为开头，以\.为结束（或者\b,即"."的前面），中间至少出现一次\d{3}的匹配
第一次匹配到1 234567890.
第二次匹配到4 567890.
第三次匹配到7 890.
然后在匹配到的数字后面加个','，变成1,234,567,890.012
*/
/*几个难点
?=是正向预匹配，即不会让?=后面的内容被匹配出来，这里的作用是不让\d{3}+被替换掉，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串
?!为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串
?:是非捕获性匹配，它使匹配不缓存起来，去掉了也不影响正确结果
\b或\.是单词分界符，这个才是重点，去掉了,只要满足开头有一个\d后面至少有一个\d{3},会变成1,2,3,4,5,6,7,890.012
*/
console.log(milliFormat(1234567890.01289769));
console.log(milliFormat(-1234567890));
console.log(milliFormat(0.01247865));

